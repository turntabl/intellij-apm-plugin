pool-1-thread-1;sun.nio.fs.WindowsNativeDispatcher.GetFileAttributesEx0(JJ)V
pool-1-thread-1;sun.nio.fs.WindowsNativeDispatcher.GetFileAttributesEx(LjavalangString;J)V
pool-1-thread-1;sun.nio.fs.WindowsFileAttributes.get(LsunniofsWindowsPath;Z)LsunniofsWindowsFileAttributes;
pool-1-thread-1;sun.nio.fs.WindowsFileSystemProvider.checkAccess(LjavaniofilePath;[LjavaniofileAccessMode;)V
pool-1-thread-1;java.nio.file.Files.isAccessible(LjavaniofilePath;[LjavaniofileAccessMode;)Z
pool-1-thread-1;java.nio.file.Files.isWritable(LjavaniofilePath;)Z
pool-1-thread-1;jdk.jfr.internal.WriteableUserPath.<init>(LjavaniofilePath;)V
pool-1-thread-1;jdk.jfr.Recording.dump(LjavaniofilePath;)V
pool-1-thread-1;com.newrelic.jfr.daemon.agent.FileJfrRecorder.recordToFile()LjavaniofilePath;
pool-1-thread-1;com.newrelic.jfr.daemon.JfrController.loop()V
pool-1-thread-1;com.newrelic.jfr.daemon.agent.AgentMain.lambda$start$0(LcomnewrelicjfrdaemonJfrController;)V
pool-1-thread-1;com.newrelic.jfr.daemon.agent.AgentMain$$Lambda$70.709865851.run()V
pool-1-thread-1;java.util.concurrent.Executors$RunnableAdapter.call()LjavalangObject;
pool-1-thread-1;java.util.concurrent.FutureTask.run()V
pool-1-thread-1;java.util.concurrent.ThreadPoolExecutor.runWorker(LjavautilconcurrentThreadPoolExecutor$Worker;)V
pool-1-thread-1;java.util.concurrent.ThreadPoolExecutor$Worker.run()V
pool-1-thread-1;java.lang.Thread.run()V
pool-1-thread-1;java.util.Objects.requireNonNull(LjavalangObject;LjavalangString;)LjavalangObject;
pool-1-thread-1;java.time.format.DateTimeFormatter.formatTo(LjavatimetemporalTemporalAccessor;LjavalangAppendable;)V
pool-1-thread-1;java.time.format.DateTimeFormatter.format(LjavatimetemporalTemporalAccessor;)LjavalangString;
pool-1-thread-1;jdk.jfr.internal.RepositoryChunk.<init>(LjdkjfrinternalSecuritySupport$SafePath;LjavatimeInstant;)V
pool-1-thread-1;jdk.jfr.internal.Repository.newChunk(LjavatimeInstant;)LjdkjfrinternalRepositoryChunk;
pool-1-thread-1;jdk.jfr.internal.PlatformRecorder.stop(LjdkjfrinternalPlatformRecording;)V
pool-1-thread-1;jdk.jfr.internal.PlatformRecording.stop(LjavalangString;)Z
pool-1-thread-1;jdk.jfr.internal.PlatformRecording.newSnapshotClone(LjavalangString;LjavalangBoolean;)LjdkjfrinternalPlatformRecording;
pool-1-thread-1;jdk.jfr.internal.PlatformRecording.dump(LjdkjfrinternalWriteableUserPath;)V
pool-1-thread-1;jdk.jfr.Recording.dump(LjavaniofilePath;)V
pool-1-thread-1;com.newrelic.jfr.daemon.agent.FileJfrRecorder.recordToFile()LjavaniofilePath;
pool-1-thread-1;com.newrelic.jfr.daemon.JfrController.loop()V
pool-1-thread-1;com.newrelic.jfr.daemon.agent.AgentMain.lambda$start$0(LcomnewrelicjfrdaemonJfrController;)V
pool-1-thread-1;com.newrelic.jfr.daemon.agent.AgentMain$$Lambda$70.709865851.run()V
pool-1-thread-1;java.util.concurrent.Executors$RunnableAdapter.call()LjavalangObject;
pool-1-thread-1;java.util.concurrent.FutureTask.run()V
pool-1-thread-1;java.util.concurrent.ThreadPoolExecutor.runWorker(LjavautilconcurrentThreadPoolExecutor$Worker)V
pool-1-thread-1;java.util.concurrent.ThreadPoolExecutor$Worker.run()V
pool-1-thread-1;java.lang.Thread.run()V